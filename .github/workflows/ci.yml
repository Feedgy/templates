name: ci

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

on:
  workflow_call:
    inputs:
      project_type:
        required: false
        type: string
        default: "python"
        description: "Type of project (python or typescript)"
      registry:
        required: false
        type: string
        default: "ghcr.io"
        description: "registry to push and get the image"
      image_name:
        required: true
        type: string
        description: "name of the image"
      username:
        required: true
        type: string
        description: "username to push the image can use github.actor"
      target_branch:
        required: false
        type: string
        default: "master"
        description: "Sets the target to build Dockerfile"
      git_lfs:
        required: false
        type: boolean
        default: false
        description: "git lfs checkout"
      coverage_file_path:
        required: false
        type: string
        default: "coverage.xml"
        description: "absolute path to coverage file"
      enable_black:
        required: false
        type: boolean
        default: true
        description: "enable black formatter"
      enable_linter:
        required: false
        type: boolean
        default: false
        description: "enable linter"
      test_command:
        required: false
        type: string
        default: "python -m pytest"
        description: "test command"

    secrets:
      registry_token:
        required: true
        description: "token to have access to registry"
      repos_token:
        required: true
        description: "token to have access to code and infra repository"
      lintly_token:
        required: true
        description: "token to have access to lintly"

jobs:
  image_tag:
    name: Image tag for docker image pull
    runs-on: ubuntu-latest
    outputs:
      docker_image: ${{ steps.image_name.outputs.lowercase }}
    steps:
      - id: image_name
        uses: ASzc/change-string-case-action@v2
        with:
          string: ${{ inputs.image_name }}

  security-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Bandit
        if: ${{ inputs.project_type == 'python' }}
        uses: jpetrucciani/bandit-check@main
      - name: NPM Audit
        if: ${{ inputs.project_type == 'typescript' }}
        run: npm audit

  formater:
    name: Formatter
    if: ${{ inputs.enable_black && inputs.project_type == 'python' }}
    runs-on: ubuntu-latest
    needs:
      - security-check
    steps:
      - uses: actions/checkout@v2
      - name: Check files using the black formatter
        id: black
        run: |
          pip install black
          black --check .
      - name: Apply Black formatter
        if: failure()
        run: |
          black .
      - name: Commit changes
        if: failure()
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git add .
          git commit -m "Format Python code with psf/black"
      - name: Create Pull Request
        if: failure()
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.repos_token }}
          title: "Format Python code with psf/black"
          commit-message: ":art: Format Python code with psf/black"
          body: |
            There appear to be some Python formatting errors in ${{ github.sha }}. This pull request
            uses the [psf/black](https://github.com/psf/black) formatter to fix these issues.
          base: ${{ github.head_ref }}
          branch: actions/black

  test:
    name: Run Tests and Coverage
    runs-on: ubuntu-latest
    needs:
      - image_tag
    container:
      image: ${{ inputs.registry }}/${{ needs.image_tag.outputs.docker_image }}/${{ inputs.target_branch }}:latest
      options: --user root
      credentials:
        username: ${{ inputs.username }}
        password: ${{ secrets.registry_token }}
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: ${{ inputs.git_lfs }}

      - name: Set Permissions
        run: |
          chmod -R 777 "$(pwd)"
      - name: Run Python tests
        if: ${{ inputs.project_type == 'python' }}
        run: |
          mkdir -p ${{ github.workspace }}/coverage_report
          ${{ inputs.test_command }} --cov --cov-report=xml:coverage.xml
      - name: Run TypeScript tests
        if: ${{ inputs.project_type == 'typescript' }}
        run: |
          npm install
          npm run test
      - name: Coverage Report
        uses: orgoro/coverage@v3
        if: github.event_name == 'pull_request' && inputs.project_type == 'python'
        with:
          coverageFile: coverage.xml
          token: ${{ secrets.repos_token }}

  static-analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run Flake8
        if: ${{ inputs.project_type == 'python' }}
        run: |
          pip install flake8
          flake8 .
      - name: Run ESLint
        if: ${{ inputs.project_type == 'typescript' }}
        run: |
          npm install
          npm run lint

  secrets-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Secret Scanning
        uses: trufflesecurity/trufflehog@main
        with:
          extra_args: --only-verified
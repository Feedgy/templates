name: build-docker

# configure as reusable workflow
on:
    workflow_call:
        inputs:
            registry:
                required: false
                type: string
                default: 'ghcr.io'
                description: 'registry to push and get the image'
            image_name:
                required: true
                type: string
                description: 'name of the image'
            docker_context:
                required: false
                type: string
                default: .
                description: 'context of build for docker'
            docker_build_args:
                required: false
                type: string
                description: 'docker build args formated in multiline string with |'
            dockerfile_path:
                required: false
                type: string
                default: ./Dockerfile
                description: 'location to get the Dockerfile for the build'
            username:
                required: true
                type: string
                description: 'username to push the image can use github.actor'
            branch:
                required: true
                type: string
                description: 'name of the branch can use github.ref_name'
            tag:
                required: true
                type: string
                description: 'tag to push the image with'
            dry_run:
                required: false
                type: boolean
                default: false
                description: 'build only with the new version of tag'
        secrets:
            registry_token:
                required: true
                description: 'token to have access to registry'
        outputs:
            pushed_tag: ${{ jobs.tag.outputs.pushed_tag }}

jobs:
    deploy-docker:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write
        outputs:
            pushed_tag: ${{ inputs.tag }}
        steps:
            -   name: Checkout repository
                uses: actions/checkout@v2

            -   id: image_registry_lower
                uses: ASzc/change-string-case-action@v2
                with:
                    string: ${{ inputs.registry }}/${{ inputs.IMAGE_NAME }}
            # Set docker driver to permit cache
            -   name: Set up Docker Buildx
                uses: docker/setup-buildx-action@v1
                with:
                    driver: docker-container
                    driver-opts: |
                        image=moby/buildkit:master
                        network=host
            # Login against a Docker registry except on PR
            # https://github.com/docker/login-action
            -   name: Log into registry ${{ inputs.registry }}
                if: github.event_name != 'pull_request'
                uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
                with:
                    registry: ${{ inputs.registry }}
                    username: ${{ inputs.username }}
                    password: ${{ secrets.registry_token }}

            # Extract metadata (tags, labels) for Docker
            # https://github.com/docker/metadata-action
            -   name: Extract Docker metadata
                id: meta
                uses: docker/metadata-action@e5622373a38e60fb6d795a4421e56882f2d7a681
                with:
                    github-token: ${{ secrets.registry_token }}
                    images: ${{ steps.image_registry_lower.outputs.lowercase }}
                    tags: |
                        type=semver, pattern={{raw}}, value=${{ inputs.tag }}
                        type=ref, event=branch
            # Build and push Docker image with Buildx (don't push on PR)
            # https://github.com/docker/build-push-action
            -   name: Build and push Docker image
                uses: docker/build-push-action@v2
                id: build
                with:
                    context: ${{ inputs.docker_context }}
                    push: ${{ inputs.dry_run == false }}
                    tags: ${{ steps.meta.outputs.tags }}
                    labels: ${{ steps.meta.outputs.labels }}
                    file: ${{ inputs.dockerfile_path }}
                    cache-from: type=registry,ref=${{ steps.image_registry_lower.outputs.lowercase }}:buildcache-${{ inputs.branch }}
                    cache-to: type=registry,ref=${{ steps.image_registry_lower.outputs.lowercase }}:buildcache-${{ inputs.branch }},mode=max
                    build-args: ${{ inputs.docker_build_args }}
name: release

# configure as reusable workflow
on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
        description: "name of the application in argocd"
      registry:
        required: false
        type: string
        default: "ghcr.io"
        description: "registry to push and get the image"
      image_name:
        required: true
        type: string
        description: "name of the image"
      docker_context:
        required: false
        type: string
        default: .
        description: "context of build for docker"
      docker_build_args:
        required: false
        type: string
        description: "docker build args formatted in multiline string with |"
      dockerfile_path:
        required: false
        type: string
        default: ./Dockerfile
        description: "location to get the Dockerfile for the build"
      docker_target:
        required: false
        type: string
        default: ""
        description: "Sets the target to build Dockerfile"
      username:
        required: true
        type: string
        description: "username to push the image can use github.actor"
      pre_release_branches:
        required: false
        type: string
        default: staging
        description: "comma separated list of pre-release branches"
      release_branches:
        required: false
        type: string
        default: production
        description: "comma separated list of release branches"
      branch:
        required: true
        type: string
        description: "name of the branch can use github.ref_name"
      infra_repository:
        required: true
        type: string
        description: "repository of the infra project"
      infra_main_branch:
        required: false
        type: string
        default: master
        description: "default branch for the infra repository"
      push_name:
        required: false
        type: string
        default: "Super Bot"
        description: "name of the user who will push on infra repository"
      push_mail:
        required: false
        type: string
        default: "bot@feedgy.solar"
        description: "mail of the user who will push on infra repository"
      dry_run:
        required: false
        type: boolean
        default: false
        description: "build only with the new version of tag"
      git_lfs:
        required: false
        type: boolean
        default: false
        description: "git lfs checkout"
      tag_prefix:
        required: false
        type: string
        default: "image"
        description: "path prefix to access image configuration tag. Default (image)"
      sentry:
        required: false
        type: boolean
        default: false
        description: "active sentry release"

    secrets:
      registry_token:
        required: true
        description: "token to have access to registry"
      repos_token:
        required: true
        description: "token to have access to code and infra repository"
      SENTRY_AUTH_TOKEN:
        required: false
        description: "token to have access to sentry"
      SENTRY_ORG:
        required: false
        description: "sentry organization slug"

jobs:
  tag:
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.tag_version.outputs.new_tag }}
      new_version: ${{ steps.tag_version.outputs.new_version }}
      changelog: ${{ steps.tag_version.outputs.changelog }}
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.repos_token }}
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.0
        with:
          github_token: ${{ secrets.repos_token }}
          release_branches: ${{ inputs.release_branches }}
          pre_release_branches: ${{ inputs.pre_release_branches }}
          dry_run: ${{ inputs.dry_run }}
          fetch_all_tags: true

  deploy-docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs:
      - tag
    outputs:
      pushed_tag: ${{ needs.tag.outputs.new_tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          lfs: ${{ inputs.git_lfs }}
      - id: image_registry_lower
        uses: ASzc/change-string-case-action@v2
        with:
          string: ${{ inputs.registry }}/${{ inputs.image_name }}
      # Set docker driver to permit cache
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver: docker-container
          driver-opts: |
            image=moby/buildkit:master
            network=host
      # Login against a Docker registry except on PR
      - name: Log into registry ${{ inputs.registry }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ${{ inputs.registry }}
          username: ${{ inputs.username }}
          password: ${{ secrets.registry_token }}

      # Extract metadata (tags, labels) for Docker
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          github-token: ${{ secrets.registry_token }}
          images: ${{ steps.image_registry_lower.outputs.lowercase }}
          tags: |
            type=semver, pattern={{raw}}, value=${{ needs.tag.outputs.new_tag }}
            type=ref, event=branch
      # Build and push Docker image with Buildx (don't push on PR)
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        id: build
        with:
          context: ${{ inputs.docker_context }}
          push: ${{ inputs.dry_run == false }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: ${{ inputs.dockerfile_path }}
          cache-from: type=registry,ref=${{ steps.image_registry_lower.outputs.lowercase }}:buildcache-${{ inputs.branch }}
          cache-to: type=registry,ref=${{ steps.image_registry_lower.outputs.lowercase }}:buildcache-${{ inputs.branch }},mode=max
          build-args: ${{ inputs.docker_build_args }}
          target: ${{ inputs.docker_target }}

      - name: Extract generic tag
        id: extract_tag
        run: |
          echo "##[set-output name=generic_tag;]$(echo ${{ steps.meta.outputs.tags }} | grep -o 'ghcr.io/[^ ]*:\(production\|staging\)')"

      - name: Scan Docker image with Trivy
        # Disable this step
        if: false 
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ steps.extract_tag.outputs.generic_tag }}
          github-pat: ${{ secrets.registry_token }}
          scan-type: image
          format: "github"
          severity: "CRITICAL"
          scanners: "vuln"
          output: "dependency-results.sbom.json"
        env:
          TRIVY_USERNAME: ${{ inputs.username }}
          TRIVY_PASSWORD: ${{ secrets.registry_token }}

      - name: Upload trivy report as a Github artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-sbom-report
          path: "${{ github.workspace }}/dependency-results.sbom.json"
          retention-days: 30 # 90 is the default

  deploy-app:
    runs-on: ubuntu-latest
    if: ${{ ! inputs.dry_run }}
    needs:
      - deploy-docker
    steps:
      - name: Get Infra project sources
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.infra_repository }}
          ref: ${{ inputs.infra_main_branch }}
          token: ${{ secrets.repos_token }}

      - name: Setup a Python environment
        uses: actions/setup-python@v2

      - name: Install PyYaml
        run: pip install pyyaml

      - name: Replace version in values YAML file of the environment
        run: |
          cd ${{ inputs.app_name }}
          # Save a python script to replace values
          echo "
          import yaml
          from pathlib import Path
          import sys
          file_path = Path('values-${{ inputs.branch }}.yaml')
          config = yaml.safe_load(file_path.read_text())

          sub_config = config
          # Configuration to modify
          for prefix in '${{ inputs.tag_prefix }}'.split('/'):
              sub_config = sub_config[prefix]
          sub_config['tag'] = '${{ needs.deploy-docker.outputs.pushed_tag }}'

          file_path.write_text(yaml.dump(config))
          " > script.py
          python script.py

          # Push the modification
          git add values-${{ inputs.branch }}.yaml
          git config --local user.email "${{ inputs.push_mail }}"
          git config --local user.name "${{ inputs.push_name }}"
          git commit -m "upgrade ${{ inputs.app_name }} on ${{ inputs.branch }} environment to ${{ needs.deploy-docker.outputs.pushed_tag }}"
          git push
  release:
    runs-on: ubuntu-latest
    if: ${{ ! inputs.dry_run }}
    needs:
      - tag
      - deploy-app
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: ${{ inputs.git_lfs }}
      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.tag.outputs.new_version }}
          name: Release ${{ needs.tag.outputs.new_version }}
          body: ${{ needs.tag.outputs.changelog }}
      - name: Create Sentry release
        uses: getsentry/action-release@v1
        if: ${{ inputs.sentry }}
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ inputs.app_name }}
        with:
          environment: ${{ inputs.branch }}
          set_commits: skip
